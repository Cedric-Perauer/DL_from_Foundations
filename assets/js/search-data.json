{
  
    
        "post0": {
            "title": "Title",
            "content": "Delving Deep into Rectifiers: . Surpassing Human-Level Performance on ImageNet Classification a summary of the paper . What did the authors want to achieve ? . Achieve above human level performance on vision (ImageNet) | Train deep Networks with rectifier functions (ReLu,LReLu,PReLU) effectively | Improve accuracy by enabling the training of deeper and larger networks | . Key elements . The key elements are a different kind of rectifier activation function called PReLu, which is very similar to LReLu as well as a different initalization technique called Kaiming/He init which improves upon the fact that Xavier initalization does not consider the non-linearities of ReLu kind functions | . PReLU . . As we can see PReLu looks a lot like LReLu, having a negative slope a when x &lt; 0, however this slope is not fixed in the beginning but learned by introducing a few hyperparameters | Due to the number of extra hyperparams being equal to the number of channels, no additional risk of overfitting is introduced | PReLu seems to keep more information in early layers and becomes more discriminative in deeper stages due to being able to model more non-linear functions | . Kaiming Initalization . The problem with Xavier init, is that it does not take into account the non-linearities of rectifier funcions, therefore a new init technique is derived by taking these activation functions into account, for the forward pass the following is derived : . Based on the response of a conv layer, which is computed by : $y_{l} = W_{l}*x_{l}+b_{l}$ ,with $x$ being a $ n = k^{2}*c$ vector ($k*k$ co-located pixels, in $c$ channels) and $W_{l}$ being a $d$ x $n$ matrix, where $d$ is the num of filters . | The elements in $W_{l}$ and $x_{l}$ are assumed to be independent from each other and share the same distribution, $W_{l}$ and $x_{l}$ are also independet from each other it follows : $Var[y_{l}] = n_{l} *Var[w_{l}*x_{l}] $ . | We let $w_{l}$ have zero mean, the variance of the product of independent variables gives us : $Var[y_{l}] = n_{l} *Var[w_{l}]*Var[x_{l}] $ , which leads to $Var[y_{l}] = n_{l} *Var[w_{l}]*E[x_{l}^{2}] $ . | $E[x_{l}^{2}]$ is the expectation of the square of $x_{l}$, we notice that $E[x_{l}^{2}] neq Var[x_{l}]$ unless $x_{l}$ has 0 mean (Random variability) , which is not the case for ReLu : $x_{l} = max(0,y_{l-1})$ . | if $w_{l-1}$ is symmetric around 0 and $b_{l-1}=0$, it follows that $y_{l-1}$ is a symmetric distribution around zero. This means that $E[x_{l}^{2}]=0.5 * Var[y_{l-1}]$ when the activation is ReLu thus : $Var[y_{l}] = 0.5 * n_{l} *Var[w_{l}]*Var[y_{l-1}] $ . | when we have L layers we have : . $Var[y_{l}] = Var[y_{1}] * prod^{L}_{l=2} (0.5 * n_{l} *Var[w_{l}])$ . | the initalization should not magnify the magnitude of the inputs signals, this is achieved by applying a proper scalar : . | . $0.5 * n_{l} *Var[w_{l}] = 1, forall {l}$ (ReLu case) . $0.5 *(1+a^{2}) * n_{l} *Var[w_{l}] = 1, forall {l}$ (PReLu case) . | . =&gt; this distribution is a 0-mean Gaussian with a std of $ sqrt{2/n_{l}}$, which is also adopted in the first layer . For the backward pass the same function applies, with $n_{l}=k_{l}^{2}*d_{l-1} = k_{l}^{2}*c_{l}$ replaced by $ tilde{n}=k_{l}^{2}*d_{l}$ : . $0.5 * tilde{n} *Var[w_{l}] = 1, forall {l}$ (ReLu) . $0.5 *(1+a^{2}) * tilde{n} *Var[w_{l}] = 1, forall {l}$ (PReLu case) . | . &quot;This means that if the initialization properly scales the backward signal, then this is also the case for the forward signal; and vice versa. For all models in this paper, both forms can make them converge.&quot; . Implementation Details . The standard hyperparms are as follows : Weight decay is 0.0005 | Momentum is 0.9. | Dropout (50%) is used in the first two fc layers | Minibatch size is fixed as 128 | The learning rates are 1e-2, 1e-3,and 1e-4, and is switched when the error plateaus | Number of epochs : 80 | simple variant of Krizhevsky’s method is used to run Multi-GPUs, the GPUs are synched before the first fc layer to run backprop/forward pass on one of the GPUs (3.8x speedup using 4 GPUs, and a 6.0x speedup using 8 GPUs) | . | The PReLU hyperparameters (slopes) are trained with Backprop, the authors proposed the following : no weight decay is used | the slopes ai are initialized as 0.25 | the slopes aiare not constrained, even without regularization aiis rarely larger than 1 | . | . Results and Conclusion . . PRelu reduces top-1 error by 1.05% and top-5 error by 0.23% (@scale 384), when the large model A is used | Kaiming init allows training deep rectifier networks and converges, this allows them to reduce the error to below human level 4.94% compared to 5.1%, you should check out how the human benchmark was established by checking out Andrej Karpathy&#39;s blog on this | It has to be noted however that this is largely due to the fine grained details that can be learned by NNs, if a prediction is incorrect humans still mostly guess the right category (for example vehicle) while NNs can be completely off. So superhuman performance is only achieved in detecting fine grained classes. This can be confirmed when training on the Pascal VOC dataset. | .",
            "url": "https://cedric-perauer.github.io/DL_from_Foundations/2020/04/05/Delving-Deep-into-rectifiers.html",
            "relUrl": "/2020/04/05/Delving-Deep-into-rectifiers.html",
            "date": " • Apr 5, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Dense Net",
            "content": "Dense Net paper summary . Short summary of the Dense Net paper, which one the CVPR best paper award in 2017. . . What did they try to accomplish ? . improve CNNs : fight the vanishing gradient problem, improve regularization, remove redundancy (redundant layers/neurons) existing in current CNNs (like ResNets), which in turn recudes the number of parameters | . Key elements . Concat and Dense conectivity . concatenating feature maps, instead of using the classic ResNet skip connection function : . . . =&gt; lth layer is used as input to (l+1)th layer =&gt; xl = Hl(xl-1) . Dense Nets concatenate feature maps of the same size, which means it has L*(L+1)/(2) connections instead of L in a normal network, where L is the number of layers. Consequently every Dense Net layer has access to the feature maps of the preceeding layers : | . . The activation function Hl is a composite function with 3x3 convolutions, Batch Norm and ReLu activations. . Pooling /Transition Layers . When the size of feature maps changes, concatenation is not viable. The network is divided into several Dense Blocks, in between those 2x2 average pooling with 1x1 conv filters and batch norm are applied forming a “transition layer”. . Growth rate . The growth rate k is a hyperparameter which regulates how much a layer contributes to the global state. If each composite function Hl produces k feature maps, the lth layer has k0 + k * (l-1) feature-maps, where k0 is the number of channels in the input layer. It has to be noted that DenseNets use narrow layers, with k=12. . Bottleneck layers . To reduce the amount of input channels (for compute efficiency), bottleneck layers are used with 1x1 convs before the 3x3 convs applied. . Compression . Compression is used to reduce the number of feature maps at transition layers, if a dense block contains m feature maps, the transition layer will generate a*m feature maps,where 0 &lt; a &lt;= 1 with a = 0.5 in most cases. . Implementation Details . Kaiming/He init. is used | Zero padding is used @ each Dense block | Global pooling after last Dense block, with Softmax activation | 3 Dense blocks are used with all datasets except for ImageNet | Weight decay of 10e-4 | Nesterov momentum of 0.9 | ImageNet implementation uses 7x7 convs instead of 3x3 | . Results and Conclusion . . Bottleneck impact decreases with depth of the network | not the same regularization issues as with ResNets1 | Dense Net BC with 15.3 Million params outperforms much larger Fractal Net (comparable to ResNet-1001), with DenseNet having 90% fewer parameters | a DenseNet with as much compute complexity (FLOPS) as ResNet-50 performs on par with ResNet-101 | DenseNet with 0.8 Million parameters performs as good as ResNet with 10.2 Millon parameters | Deep Supervision is achieved with a single classifier. This provides easier loss functions and doesn’t need a multi classifier (like Inception). | The intuition behind the good performance of DenseNets : architecture style is similar to a ResNet trained with stochastic depth, that means redundant layers are dropped from the beginning allowing smaller Networks | . References that are interesting to follow . DenseNets Implentation Github | ResNets paper | Fractal Nets paper | Delving Deep into Rectifiers: Surpassing Human-Level Performance on ImageNet Classification | .",
            "url": "https://cedric-perauer.github.io/DL_from_Foundations/2020/04/04/Dense-Net.html",
            "relUrl": "/2020/04/04/Dense-Net.html",
            "date": " • Apr 4, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastai DL from the Foundations Lesson 2",
            "content": "Lesson 2 How to train your model . Loss . For our Classification task, we will be using Cross Entropy Loss (also called Log Loss) ourselves. We define a simple Linear Model for our task. We will be using the Pytorch functions, as we already implemented those in Lesson 1 : . class Model(nn.Module): def __init__(self,in_dim,nh,out_dim): super().__init__() self.layers = [nn.Linear(in_dim,nh), nn.ReLu(),nn.Linear(nh,out_dim)] def __call__(self,x): for i in self.layers: x = l(x) return x . Since we are using Softmax, we need to compute it’s output first : . In practice we need it’s log, the code is simple : . def log_softmax(x) : return (x.exp()/x.exp().sum(-1,keepdim=True))).log() . Using simple log-math . log(a/b) = log(a) - log(b) . Which leads to in pseudo code : . log(x.exp()) - log(x.exp().sum()) . We can simplify this log_softmax function, like so : . def log_softmax(x) : return x - x.exp().sum(-1,keepdim=True).log() . . Using numpy integer array indexing we can compute our negative log likelihood like so by passing our softmax output : . def negative_log_likelihood(input,target): return -input[range(target.shape[0]), target].mean() . However we can compute the log of the sum of exponentials in a more stable way to avoid an overflow of big activations, with the LogSumExp trick : . def logsumexp(exp): a= x.max(-1)[0] #maximum of x(j) return a + (x-a[:,None]).exp().sum(-1).log() . Updating our softmax again, this leads to : . def log_softmax(x): return x - x.logsumexp(-1,keepdim=True) . x.logsumexp() is the Pytorch function in this case. In order to compare our function with Pytorch, we can use . test_near(logsumexp(pred), pred.logsumexp(-1)) . test_near will throw an AssertionError if they are not equal to each other. . Now we succesfully implemented F.cross_entropy(pred,y_train), which is made out of F.log_softmax and F.nll_loss . The accuracy can be calculated with : . def accuracy(out, yb): return (torch.argmax(out, dim=1)==yb).float().mean() . Training Loop . Basically the training loop repeats over the following steps: . get the output of the model on a batch of inputs | compare the output to the labels we have and compute a loss | calculate the gradients of the loss with respect to every parameter of the model | update said parameters with those gradients to make them a little bit better | . Now we can implement our Training Loop : . for epoch in range(epochs): for i in range((n-1)//bs + 1): # slice dataset in batches start_i = i*bs end_i = start_i+bs xb = x_train[start_i:end_i] yb = y_train[start_i:end_i] loss = loss_func(model(xb), yb) loss.backward() with torch.no_grad(): for l in model.layers: if hasattr(l, &#39;weight&#39;): l.weight -= l.weight.grad * lr l.bias -= l.bias.grad * lr l.weight.grad.zero_() l.bias .grad.zero_() . This looks kind of messy. Since our parameters can all be stored in a model class, we can loop over them and update them easily. However we need to implement a dummy Module first : . Module and improved training loop . class DummyModule(): def __init__(self, n_in, nh, n_out): self._modules = {} self.l1 = nn.Linear(n_in,nh) self.l2 = nn.Linear(nh,n_out) def __setattr__(self,k,v): #this is called everytime self is assigned if not k.startswith(&quot;_&quot;): self._modules[k] = v # just checks if it doesn&#39;t start with _ to avoid calling python _modules recursively super().__setattr__(k,v) #super class is python object def __repr__(self): return f&#39;{self._modules}&#39; def parameters(self): for l in self._modules.values(): for p in l.parameters(): yield p . for simplicity we can now use the Pytorch Module . class Model(nn.Module): def __init__(self,layers): super().__init__() #initalizes self._modules self.layers = layers for i,l in enumerate(self.layers) : self.add_module(f&#39;layer_{i}&#39;,l) def __call__(): for layer in self.layers: x = l(x) return x . now we can call the training more conveniently : . for epoch in range(epochs): for i in range((n-1)//bs + 1): # slice dataset in batches start_i = i*bs end_i = start_i+bs xb = x_train[start_i:end_i] yb = y_train[start_i:end_i] loss = loss_func(model(xb), yb) loss.backward() with torch.no_grad() for param in model.parameters(): param -= lr * param.grad . We can make it even easier with nn.ModuleList to recreate nn.Sequential. . class SequentialModel(nn.Module): def __init__(self, layers): super().__init__() self.layers = nn.ModuleList(layers) def __call__(self, x): for l in self.layers : x = l(x) return x . Let’s replace our previous manually coded optimization step: . with torch.no_grad(): for p in model.parameters(): p -= p.grad * lr model.zero_grad() . and instead use just: . opt.step() opt.zero_grad() . Optimizer . By creating our own Optimizer Function . class Optimizer(): def __init__(self, params, lr=0.5): self.params,self.lr=list(params),lr def step(self): with torch.no_grad(): for p in self.params: p -= p.grad * lr def zero_grad(self): for p in self.params: p.grad.data.zero_() . PyTorch already provides optimizers, like optim.SGD and optim.Adam, which also handles more stuff. . Now we can further simplify our Training loop : . for epoch in range(epochs): for i in range((n-1)//bs + 1): start_i = i*bs end_i = start_i+bs xb = x_train[start_i:end_i] yb = y_train[start_i:end_i] pred = model(xb) loss = loss_func(pred, yb) loss.backward() opt.step() opt.zero_grad() . When implementing stuff yourself, it’s always good to put some tests in. Like checking the accuracy for example. . Dataset and DataLoader . Dataset . We can further simplify this by converting . xb = x_train[start_i:end_i] yb = y_train[start_i:end_i] . with a Dataset Class : . class Dataset(): def __init__(self,x,y): self.x,self.y = x,y def __len__(self): return len(self.x) def __getitem__(self,i): return self.x[i], self.y[i] train_ds,valid_ds = Dataset(x_train, y_train),Dataset(x_valid, y_valid) . Now we can call our loop like this : . for e in range(epochs): for i in range((n-1)//bs+1): x,y = train_ds[i*bs:i*bs+bs] pred = model(x) loss = loss_func(pred,y) loss.backward() opt.step() opt.zero_grad() . DataLoader . We can make this even easier with a Dataloader to iterate over our Dataset automatically. . class Dataloader : def __init__(self, ds, bs): self.ds,self.bs = ds,bs def __iter__(self): for i in range(0, len(self.ds), self.bs): yield self.ds[i:i+self.bs] . yield is used, in order to produce a series of values over time. We can use the Dataloader with next and iter : . train_dl = DataLoader(train_ds, bs) valid_dl = DataLoader(valid_ds, bs) xb,yb = next(iter(valid_dl)) . now we can put our train loop in a wonderful function : . def fit(): for epoch in range(epochs): for xb,yb in train_dl: pred = model(xb) loss = loss_func(pred, yb) loss.backward() opt.step() opt.zero_grad() . Sampler . In order to have a random order, we can implement a Sampler class : . class Sampler(): def __init__(self, ds, bs, shuffle=False): self.n,self.bs,self.shuffle = len(ds),bs,shuffle def __iter__(self): self.idxs = torch.randperm(self.n) if self.shuffle else torch.arange(self.n) for i in range(0, self.n, self.bs): yield self.idxs[i:i+self.bs] . Now we can change our DataLoader to include our sampler as an argument. . def collate(b): xs,ys = zip(*b) return torch.stack(xs),torch.stack(ys) class DataLoader(): def __init__(self, ds, sampler, collate_fn=collate): self.ds,self.sampler,self.collate_fn = ds,sampler,collate_fn def __iter__(self): for s in self.sampler: yield self.collate_fn([self.ds[i] for i in s]) . collate stacks tensors, we can also add padding, etc … PyTorch does the same thing as well, but also adds num_workers which can be used to start several threads and run more efficiently : . train_dl = DataLoader(train_ds, sampler=train_samp, collate_fn=collate,num_workers=num_workers) valid_dl = DataLoader(valid_ds, sampler=valid_samp, collate_fn=collate,num_workers=num_workers) . With Val Set . Using best practices we should add a val set to store our best model and test during training : . def fit(epochs, model, loss_func, opt, train_dl, valid_dl): for epoch in range(epochs): # Handle batchnorm / dropout model.train() # print(model.training) for xb,yb in train_dl: loss = loss_func(model(xb), yb) loss.backward() opt.step() opt.zero_grad() model.eval() # print(model.training) with torch.no_grad(): tot_loss,tot_acc = 0.,0. for xb,yb in valid_dl: pred = model(xb) tot_loss += loss_func(pred, yb) tot_acc += accuracy (pred,yb) nv = len(valid_dl) print(epoch, tot_loss/nv, tot_acc/nv) return tot_loss/nv, tot_acc/nv . I divided it in to a train and val Function for better readability : . def train(model, loss_func, opt, train_dl): model.train() for xb,yb in train_dl : loss = loss_func(model(xb),yb) loss.backward() opt.step() opt.zero_grad() def val(epoch,model, loss_func, valid_dl): model.eval() with torch.no_grad(): total_loss, total_acc = 0.,0. for xb,yb in valid_dl: total_loss += loss_func(model(xb),yb) total_acc += accuracy(model(xb),yb) iterations = len(valid_dl) print(epoch, total_loss/iterations, total_acc/iterations) return total_loss, total_acc, iterations def fit(epochs,model,loss_func,opt,train_dl,valid_dl): for epoch in range(epochs) : train(model,loss_func,opt,train_dl) loss,acc, nv = val(epoch,model,loss_func,valid_dl) return loss/(nv), acc/(nv) . Powerful Training Loops with Callbacks . In order to customize out training loop in many ways (regularization techniques, visualization, early stopping,…), we want to be able to do so easily without having to write a huge loop function all the time that is hard to read and update. For this fastai uses something called callbacks : . . Databunch . This can be used to store our info and doesn’t have any real logic. . class DataBunch(): def __init__(self, train_dl, valid_dl, c=None): self.train_dl,self.valid_dl,self.c = train_dl,valid_dl,c @property def train_ds(self): return self.train_dl.dataset @property def valid_ds(self): return self.valid_dl.dataset data = DataBunch(*get_dls(train_ds, valid_ds, bs), c) #c is max y value #further storage wrappers def get_model(data, lr=0.5, nh=50): m = data.train_ds.x.shape[1] model = nn.Sequential(nn.Linear(m,nh), nn.ReLU(), nn.Linear(nh,data.c)) return model, optim.SGD(model.parameters(), lr=lr) class Learner(): def __init__(self, model, opt, loss_func, data): self.model,self.opt,self.loss_func,self.data = model,opt,loss_func,data . With our previous training loop modified a bit we can add Callbacks now, : . def one_batch(xb, yb, cb): if not cb.begin_batch(xb,yb): return loss = cb.learn.loss_func(cb.learn.model(xb), yb) if not cb.after_loss(loss): return loss.backward() if cb.after_backward(): cb.learn.opt.step() if cb.after_step(): cb.learn.opt.zero_grad() def all_batches(dl, cb): for xb,yb in dl: one_batch(xb, yb, cb) if cb.do_stop(): return def fit(epochs, learn, cb): if not cb.begin_fit(learn): return for epoch in range(epochs): if not cb.begin_epoch(epoch): continue all_batches(learn.data.train_dl, cb) if cb.begin_validate(): with torch.no_grad(): all_batches(learn.data.valid_dl, cb) if cb.do_stop() or not cb.after_epoch(): break cb.after_fit() . add Callbacks . class Callback(): def begin_fit(self, learn): self.learn = learn return True def after_fit(self): return True def begin_epoch(self, epoch): self.epoch=epoch return True def begin_validate(self): return True def after_epoch(self): return True def begin_batch(self, xb, yb): self.xb,self.yb = xb,yb return True def after_loss(self, loss): self.loss = loss return True def after_backward(self): return True def after_step(self): return True . Callback Hander . class CallbackHandler(): def __init__(self,cbs=None): self.cbs = cbs if cbs else [] def begin_fit(self, learn): self.learn,self.in_train = learn,True learn.stop = False res = True for cb in self.cbs: res = res and cb.begin_fit(learn) return res def after_fit(self): res = not self.in_train for cb in self.cbs: res = res and cb.after_fit() return res def begin_epoch(self, epoch): self.learn.model.train() self.in_train=True res = True for cb in self.cbs: res = res and cb.begin_epoch(epoch) return res def begin_validate(self): self.learn.model.eval() self.in_train=False res = True for cb in self.cbs: res = res and cb.begin_validate() return res def after_epoch(self): res = True for cb in self.cbs: res = res and cb.after_epoch() return res def begin_batch(self, xb, yb): res = True for cb in self.cbs: res = res and cb.begin_batch(xb, yb) return res def after_loss(self, loss): res = self.in_train for cb in self.cbs: res = res and cb.after_loss(loss) return res def after_backward(self): res = True for cb in self.cbs: res = res and cb.after_backward() return res def after_step(self): res = True for cb in self.cbs: res = res and cb.after_step() return res def do_stop(self): try: return self.learn.stop finally: self.learn.stop = False . Callback Test . class TestCallback(Callback): def begin_fit(self,learn): super().begin_fit(learn) self.n_iters = 0 return True def after_step(self): self.n_iters += 1 print(self.n_iters) if self.n_iters&gt;=10: self.learn.stop = True return True . These methods are checked for in our one_batch function and are executed in our training loop. . Callback Simplification . We do on not need to implement each function seperately by using a call function : . def __call__(self, cb_name): for cb in sorted(self.cbs, key=lambda x: x._order): f = getattr(cb, cb_name, None) if f and f(): return True return False . This allows is to recreate the Calbacks in a better way : . #export import re _camel_re1 = re.compile(&#39;(.)([A-Z][a-z]+)&#39;) _camel_re2 = re.compile(&#39;([a-z0-9])([A-Z])&#39;) def camel2snake(name): s1 = re.sub(_camel_re1, r&#39; 1_ 2&#39;, name) return re.sub(_camel_re2, r&#39; 1_ 2&#39;, s1).lower() class Callback(): _order=0 def set_runner(self, run): self.run=run def __getattr__(self, k): return getattr(self.run, k) @property def name(self): name = re.sub(r&#39;Callback$&#39;, &#39;&#39;, self.__class__.__name__) return camel2snake(name or &#39;callback&#39;) #export class TrainEvalCallback(Callback): def begin_fit(self): self.run.n_epochs=0. self.run.n_iter=0 def after_batch(self): if not self.in_train: return self.run.n_epochs += 1./self.iters self.run.n_iter += 1 def begin_epoch(self): self.run.n_epochs=self.epoch self.model.train() self.run.in_train=True def begin_validate(self): self.model.eval() self.run.in_train=False class TestCallback(Callback): def after_step(self): if self.train_eval.n_iters&gt;=10: return True #export class Runner(): def __init__(self, cbs=None, cb_funcs=None): cbs = listify(cbs) for cbf in listify(cb_funcs): cb = cbf() setattr(self, cb.name, cb) cbs.append(cb) self.stop,self.cbs = False,[TrainEvalCallback()]+cbs @property def opt(self): return self.learn.opt @property def model(self): return self.learn.model @property def loss_func(self): return self.learn.loss_func @property def data(self): return self.learn.data def one_batch(self, xb, yb): self.xb,self.yb = xb,yb if self(&#39;begin_batch&#39;): return self.pred = self.model(self.xb) if self(&#39;after_pred&#39;): return self.loss = self.loss_func(self.pred, self.yb) if self(&#39;after_loss&#39;) or not self.in_train: return self.loss.backward() if self(&#39;after_backward&#39;): return self.opt.step() if self(&#39;after_step&#39;): return self.opt.zero_grad() def all_batches(self, dl): self.iters = len(dl) for xb,yb in dl: if self.stop: break self.one_batch(xb, yb) self(&#39;after_batch&#39;) self.stop=False def fit(self, epochs, learn): self.epochs,self.learn = epochs,learn try: for cb in self.cbs: cb.set_runner(self) if self(&#39;begin_fit&#39;): return for epoch in range(epochs): self.epoch = epoch if not self(&#39;begin_epoch&#39;): self.all_batches(self.data.train_dl) with torch.no_grad(): if not self(&#39;begin_validate&#39;): self.all_batches(self.data.valid_dl) if self(&#39;after_epoch&#39;): break finally: self(&#39;after_fit&#39;) self.learn = None . In order to track our stats we will add a third Callback to see them, it will make us of a class that computes these. . class AvgStats(): def __init__(self, metrics, in_train): self.metrics,self.in_train = listify(metrics),in_train def reset(self): self.tot_loss,self.count = 0.,0 self.tot_mets = [0.] * len(self.metrics) @property def all_stats(self): return [self.tot_loss.item()] + self.tot_mets @property def avg_stats(self): return [o/self.count for o in self.all_stats] def __repr__(self): if not self.count: return &quot;&quot; return f&quot;{&#39;train&#39; if self.in_train else &#39;valid&#39;}: {self.avg_stats}&quot; def accumulate(self, run): bn = run.xb.shape[0] self.tot_loss += run.loss * bn self.count += bn for i,m in enumerate(self.metrics): self.tot_mets[i] += m(run.pred, run.yb) * bn class AvgStatsCallback(Callback): def __init__(self, metrics): self.train_stats,self.valid_stats = AvgStats(metrics,True),AvgStats(metrics,False) def begin_epoch(self): self.train_stats.reset() self.valid_stats.reset() def after_loss(self): stats = self.train_stats if self.in_train else self.valid_stats with torch.no_grad(): stats.accumulate(self.run) def after_epoch(self): print(self.train_stats) print(self.valid_stats) . As this Callback alread tracks all our Stats, we can easily update it to include early stopping and saving the best model, based on validaton loss, I did it like this : . class AvgStatsCallback(Callback): def __init__(self, metrics,early_stopping_iter,loss_stop): self.train_stats,self.valid_stats = AvgStats(metrics,True),AvgStats(metrics,False) self.lowest_val_loss = float(&quot;inf&quot;) self.cur_val_loss = float(&quot;inf&quot;) self.early_stopping_array = deque(maxlen=3) self.early_stopping_iter = 3 self.loss_stop = loss_stop def begin_epoch(self): self.train_stats.reset() self.valid_stats.reset() def save_model(self): self.cur_val_loss, self.cur_val_acc = self.valid_stats.avg_stats if self.cur_val_loss &lt; self.lowest_val_loss : self.lowest_val_loss = self.cur_val_loss torch.save(learn.model.state_dict(),&quot;best_model.pt&quot;) print(&quot;Saving Model with val loss of :{:.4f}&quot;.format(self.lowest_val_loss)) def early_stopping(self): self.early_stopping_array.append(self.cur_val_loss) if (self.early_stopping_array.maxlen == len(self.early_stopping_array)): diff = 0.0 for i in range(0,len(self.early_stopping_array)-1): #check diff between losses diff += abs(self.early_stopping_array[i]-self.early_stopping_array[i+1]) diff /= (len(self.early_stopping_array)-1) if(diff &lt; self.loss_stop): return &quot;stop&quot; def after_loss(self): stats = self.train_stats if self.in_train else self.valid_stats with torch.no_grad(): stats.accumulate(self.run) def after_epoch(self): print(self.train_stats) print(self.valid_stats) self.save_model() if self.early_stopping()==&quot;stop&quot;: return True print(self.valid_stats.avg_stats[1]) . The Class now also keeps track of the lowest validation loss overall and can save the best model based on validation loss. Early stopping was implemented by tracking the last n elements, with n=early_stopping_iter in this case. We are storing it in a deque data structures. The early_stopping function will return a string that will then lead to our after_epoch function returning True which will stop training, as we have : . if self(&#39;after_epoch&#39;): break . in our training loop. . Now we can finally call our methods and start trainig. . learn = Learner(*get_model(data), loss_func, data) stats = AvgStatsCallback([accuracy]) run = Runner(cbs=stats) run.fit(2, learn) loss,acc = stats.valid_stats.avg_stats . Using partial we can create a Function that can create a callback function : . from functools import partial acc_cbf = partial(AvgStatsCallback,accuracy) run = Runner(cb_funcs=acc_cbf) . This way we can create Callback funcs easily, e.g. by using a list. . Annealing . We define two new callbacks: the Recorder to save track of the loss and our scheduled learning rate, and a ParamScheduler that can schedule any hyperparameter as long as it’s registered in the state_dict of the optimizer. . class Recorder(Callback): def begin_fit(self): self.lrs,self.losses = [],[] def after_batch(self): if not self.in_train: return self.lrs.append(self.opt.param_groups[-1][&#39;lr&#39;]) self.losses.append(self.loss.detach().cpu()) def plot_lr (self): plt.plot(self.lrs) def plot_loss(self): plt.plot(self.losses) class ParamScheduler(Callback): _order=1 def __init__(self, pname, sched_func): self.pname,self.sched_func = pname,sched_func def set_param(self): for pg in self.opt.param_groups: pg[self.pname] = self.sched_func(self.n_epochs/self.epochs) def begin_batch(self): if self.in_train: self.set_param() def sched_lin(start, end): def _inner(start, end, pos): return start + pos*(end-start) return partial(_inner, start, end) def annealer(f): def _inner(start, end): return partial(f, start, end) return _inner @annealer def sched_lin(start, end, pos): return start + pos*(end-start) . The Decorator annealer passes sched_lin in annealer and replaces sched_lin() definition with what annealer returns. . other scheduler funcs . @annealer def sched_cos(start, end, pos): return start + (1 + math.cos(math.pi*(1-pos))) * (end-start) / 2 @annealer def sched_no(start, end, pos): return start @annealer def sched_exp(start, end, pos): return start * (end/start) ** pos def cos_1cycle_anneal(start, high, end): return [sched_cos(start, high), sched_cos(high, end)] #This monkey-patch is there to be able to plot tensors torch.Tensor.ndim = property(lambda x: len(x.shape)) . plot them . annealings = &quot;NO LINEAR COS EXP&quot;.split() a = torch.arange(0, 100) p = torch.linspace(0.01,1,100) fns = [sched_no, sched_lin, sched_cos, sched_exp] for fn, t in zip(fns, annealings): f = fn(2, 1e-2) plt.plot(a, [f(o) for o in p], label=t) plt.legend() . Combine Schedulers with a function : . def combine_scheds(pcts, scheds): assert sum(pcts) == 1. pcts = tensor([0] + listify(pcts)) assert torch.all(pcts &gt;= 0) pcts = torch.cumsum(pcts, 0) def _inner(pos): idx = (pos &gt;= pcts).nonzero().max() actual_pos = (pos-pcts[idx]) / (pcts[idx+1]-pcts[idx]) return scheds[idx](actual_pos) return _inner sched = combine_scheds([0.3, 0.7], [sched_cos(0.3, 0.6), sched_cos(0.6, 0.2)]) . Here is an example: use 30% of the budget to go from 0.3 to 0.6 following a cosine, then the last 70% of the budget to go from 0.6 to 0.2, still following a cosine. Train for a long time @ high lr, then switch to lower lr with cosine 1 cycle schedules. . Now we can train with our Callbacks and cosine scheduling. . cbfs = [Recorder, partial(AvgStatsCallback,accuracy), partial(ParamScheduler, &#39;lr&#39;, sched)] learn = create_learner(get_model_func(0.3), loss_func, data) run = Runner(cb_funcs=cbfs) run.fit(3, learn) . These Callbacks can also be used to move compute to our GPU ! .",
            "url": "https://cedric-perauer.github.io/DL_from_Foundations/markdown/2020/04/02/DL-From-Foundations-Part2.html",
            "relUrl": "/markdown/2020/04/02/DL-From-Foundations-Part2.html",
            "date": " • Apr 2, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastai DL from the Foundations Lesson 1",
            "content": "Fastai DL from the Foundations Lesson 1 . The idea of this Repo is to manage and document the Code for the fastai Deep Learning from the foundations course and include Papers and Summaries of them when it is helpful to do so. The course focuses on building large components of the fastai library and Pytorch from scratch to allow deep understanding of the fastai and Pytorch frameworks, which enables the creation of own algorithms and makes debugging easier. . . The Code is based on the code in the fastai course (v3), check out their repo which also includes part 1 which is realy focused on the practical side of things. Thank you to Jeremy, Rachel and the fastai Team for this great course. . In order to understand the material of part 2, you should be familiar with the following concepts, depending on each category : . Fundamentals . Affine functions &amp; non-linearities | Parameters &amp; activations | Random weight initalization and transfer learning | Stochastic gradient descent, Momentum and ADAM (a combination of RMSprop and Momentum) | Regularization techniques, specifically batch norm, dropout, weight decay and data augmentation | Embeddings Vision . | Image classification and Regression Lesson 1 | Image classification and Regression Lesson 2 | Conv Nets | Residual and dense blocks | Segmentation : U-Net | GANs NLP . | Language models &amp; NLP Tabular Data . | Continious &amp; categorical variables | Collaborative filtering | . ## Lesson 1 . As we already know DL is mainly based on Linear Algebra, so let’s implement some simple Matrix Multiplication ! We already know that np.matmul can be used for this, bur let’s do it ourselves. . def matmul(a,b): ar,ac = a.shape # n_rows * n_cols br,bc = b.shape assert ac==br #check for right dimensions =&gt; output dim is ar,bc c = torch.zeros(ar, bc) for i in range(ar): for j in range(bc): for k in range(ac): # or br c[i,j] += a[i,k] * b[k,j] return c . This is a very simple and inefficient implementation, which runs in 572 ms on my CPU with matrix dimensions 5x784 multiplied by 784x10. As expected the output array has 5 rows, if we used MNIST (50k) rows onw forward pass would take more than an hour which is unacceptable. . To improve this we can pass the Code down to a lower level language (Pytorch uses ATen a Tensor library for this). This can be done with elementwise multiplication (also works on Tensors with rank &gt; 1) : . def matmul(a,b): ar,ac = a.shape br,bc = b.shape assert ac==br c = torch.zeros(ar, bc) for i in range(ar): for j in range(bc): c[i,j] = (a[i,:] * b[:,j]).sum() #row by column return c . . This is essentially using the above formula and executing it in C code, with a runtime of : 802 µs ± 60.2 µs per loop (mean ± std. dev. of 7 runs, 10 loops each). Which is about 714 times faster than the first implementation ! Wooho we are done ! . Broadcasting . Hold on not so fast ! We can still do better by removing the inner loop with Broadcasting. Broadcasting “broadcasts” the smaller array across the larger one, so they have compatible shapes, operations are vecorized so that loops are executed in C without any overhead. You can see the broadcasted version of a vector by calling : . &lt;smaller_array&gt;.expand_as(&lt;larger_array&gt;) . after expansion you can call : . &lt;smaller_array&gt;.storage() . and you will see that no additional memory is needed. With this our matmul looks like this : . def matmul(a,b): ar,ac = a.shape br,bc = b.shape assert ac==br c = torch.zeros(ar, bc) for i in range(ar): c[i] = (a[i ].unsqueeze(-1) * b).sum(dim=0) #unsqueeze is used to unsqueeze a to rank 2 return c . This code executes in 172 µs ± 14.3 µs per loop (mean ± std. dev. of 7 runs, 10 loops each). Which means we are 3325.81 faster than in the beginning, nice. . Einstein Summation . A compact representation to combine products and sums in a general way. . def matmul(a,b): return torch.einsum(&#39;ik,kj-&gt;ij&#39;, a, b) . This speeds up the code a little more (factor 3575 compared to the start), but more improvements can be made. . It uses this string “mini language” (sort of like regex) to specify the multiply, it is a little bit annoying and languages like Swift will hopefully allow us to get rid of this. . Pytorch Op . Pushes the code to BLAS, Hardware optimized code. We can not specify this with Pytorch, with Swift this could be optimized by the programmer more easily. A classic operation is the @ operator, it can do more than matmul (such as Batch wise, Tensor Reductions,…). . Matmul Summary . Algorithm Runtime on CPU Factor improvement . Naive Loops | 572 ms | 1 | . Loops + elementwise row/column multiply | 802 µs | 714 | . Brodacasting | 172 µs | 3326 | . Einstein Summation | 160 µs | 3575 | . Pytorch’s function (uses HW specific BLAS) | 86 µs | 6651 | . Now let’s use it to init our weights and code RELU . Init . We create a 2layer Net, with a hidden layer of size 50. . m is the 2nd dimension size of our input. . nh = 50 w1 = torch.randn(m,nh)/math.sqrt(m) b1 = torch.zeros(nh) w2 = torch.randn(nh,1)/math.sqrt(nh) b2 = torch.zeros(1) . Randn gives us weights with mean 0 and std of 1. Just using random numbers the mean and std of our output vector will be way off. In order to avoid this we divide by sqrt(m), which will keep our output mean and std in bounds. . Another common initalization method is Xavier Initalization. Check out Andrej Karpathy’s lecture (starting at about 45:00) for a good explanation Even more advanced methods like Fixup initalization can be used. The authors of the paper are able to learn deep nets (up to 10k layers) as stable without normalization when using Fixup. . Problem : if the variance halves each layer, the activation will vanish after some time, leading to dead neurons. . Due to this the 2015 ImageNet ResNet winners, see 2.2 in the paper suggested this : Up to that point init was done with random weights from Gaussian distributions, which used fixed std deviations (for example 0.01). These methods however did not allow deeper models (more than 8 layers) to converge in most cases. Due to this, in the older days models like VGG16 had to train the first 8 layers at first, in order to then initalize the next ones. As we can imagine this takes longer to train, but also may lead to a poorer local optimum. Unfortunately the Xavier init paper does not talk about non-linarities, but should not be used with ReLu like functions, as the ReLu function will half the distribution (values smaller than zero are = 0) at every step. . . Looking at the distributions in the plots, you can see that the rapid decrease of the std. deviation leads to ReLu neurons activating less and less. . The Kaiming init paper investigates the variance at each layer and ends up suggesting the following : . essentially it just adds the 2 in the numerator to avoid the halfing of the variance due at each step. . A direct comparison in the paper on a 22 layer model shows the benefit, even though Xavier converges as well, Kaiming init does so significantly faster. With a deeper 30-layer model the advantage of Kaiming is even more evident. . Kaiming init code : . w1 = torch.randn(m,nh)*math.sqrt(2/m) . ReLu can be implemented easily, it clamps values below 0 and is linear otherwise : . def relu(x): return x.clamp_min(0.) . Leaky ReLu avoids 0-ing the gradient by using a small negative slope below 0 (0.01 usually). . Therfore Kaiming init with ReLU can be implemented like this : . w1 = torch.randn(m,nh)*math.sqrt(2./m ) t1 = relu(lin(x_valid, w1, b1)) t1.mean(),t1.std() . Info . The Pytorch source code in the tutorial for torch.nn.Conv2d uses a kaiming init with : . init.kaiming_uniform_(self.weight, a=math.sqrt(5)) . .sqrt(5) was an original bug from the Lua Torch and was fixed now ! . Loss Function MSE . Now that we have done almost one forward pass,we still need to implement an error function. MSE Error, popular for regression tasks, can be implemented like this : . def mse(output, targ): return (output.squeeze(-1) - targ).pow(2).mean() . .squeeze() is used to get rid of a trainiling (,1) in this case. . Gradient and Backward Pass . Mathematically the Backward Pass uses the chain rule to compute all of the gradients. . In order to Backprop effectively, we need to calc the gradients of all of our components. In our case these are our loss, activation functions (only ReLu, which is easy) and our linear layers. . I suggest CS 231n by Andrej Karpathy for mathematical explanation of Backprop. . Let’s start with MSE : . def mse_grad(inp, targ): # grad of loss with respect to output of previous layer inp.g = 2. * (inp.squeeze() - targ).unsqueeze(-1) / inp.shape[0] . Relu : . def relu_grad(inp, out): # grad of relu with respect to input activations inp.g = (inp&gt;0).float() * out.g . Very simple, the gradient is either 0 or 1. In the Leaky Relu Case it’s either -0.01 or 1. . Linear Layers . def lin_grad(inp, out, w, b): # grad of matmul with respect to input inp.g = out.g @ w.t() #matrix prod with the transpose w.g = (inp.unsqueeze(-1) * out.g.unsqueeze(1)).sum(0) b.g = out.g.sum(0) . Forward and Backward Pass . def forward_and_backward(inp, targ): # forward pass: l1 = inp @ w1 + b1 l2 = relu(l1) out = l2 @ w2 + b2 # we don&#39;t actually need the loss in backward! loss = mse(out, targ) # backward pass, just reverse order: mse_grad(out, targ) lin_grad(l2, out, w2, b2) relu_grad(l1, l2) lin_grad(inp, l1, w1, b1) . In order to check our results, we can use Pytorch : . We can control our results with Pytorch auto_grad() function . xt2 = x_train.clone().requires_grad_(True) w12 = w1.clone().requires_grad_(True) w22 = w2.clone().requires_grad_(True) b12 = b1.clone().requires_grad_(True) b22 = b2.clone().requires_grad_(True) . .requires_grad(True) turns a tensor in to an autograd so it can keep track of each step . Refactor . It’s always good to refactor our code. This can be done by creating classes and using our functions. One for forward and one for backward pass. . class Relu(): def __call__(self, inp): self.inp = inp self.out = inp.clamp_min(0.)-0.5 return self.out def backward(self): self.inp.g = (self.inp&gt;0).float() * self.out.g . class Lin(): def __init__(self, w, b): self.w,self.b = w,b def __call__(self, inp): self.inp = inp self.out = inp@self.w + self.b return self.out def backward(self): self.inp.g = self.out.g @ self.w.t() # Creating a giant outer product, just to sum it, is inefficient! self.w.g = (self.inp.unsqueeze(-1) * self.out.g.unsqueeze(1)).sum(0) self.b.g = self.out.g.sum(0) . class Mse(): def __call__(self, inp, targ): self.inp = inp self.targ = targ self.out = (inp.squeeze() - targ).pow(2).mean() return self.out def backward(self): self.inp.g = 2. * (self.inp.squeeze() - self.targ).unsqueeze(-1) / self.targ.shape[0] . Lastly we create a model class. . class Model(): def __init__(self, w1, b1, w2, b2): self.layers = [Lin(w1,b1), Relu(), Lin(w2,b2)] self.loss = Mse() def __call__(self, x, targ): for l in self.layers: x = l(x) return self.loss(x, targ) def backward(self): self.loss.backward() for l in reversed(self.layers): l.backward() . The execution times is to slow and we want to avoid the call() declarations so we define a module class . further Refactor . class Module(): def __call__(self, *args): self.args = args self.out = self.forward(*args) return self.out def forward(self): raise Exception(&#39;not implemented&#39;) def backward(self): self.bwd(self.out, *self.args) . class Relu(Module): def forward(self, inp): return inp.clamp_min(0.)-0.5 def bwd(self, out, inp): inp.g = (inp&gt;0).float() * out.g . class Lin(Module): def __init__(self, w, b): self.w,self.b = w,b def forward(self, inp): return inp@self.w + self.b def bwd(self, out, inp): inp.g = out.g @ self.w.t() self.w.g = torch.einsum(&quot;bi,bj-&gt;ij&quot;, inp, out.g) self.b.g = out.g.sum(0) . class Mse(Module): def forward (self, inp, targ): return (inp.squeeze() - targ).pow(2).mean() def bwd(self, out, inp, targ): inp.g = 2*(inp.squeeze()-targ).unsqueeze(-1) / targ.shape[0] . class Model(): def __init__(self): self.layers = [Lin(w1,b1), Relu(), Lin(w2,b2)] self.loss = Mse() def __call__(self, x, targ): for l in self.layers: x = l(x) return self.loss(x, targ) def backward(self): self.loss.backward() for l in reversed(self.layers): l.backward() . Now we can call the forward and backprop passes for our model easily. . Summary . To summarize we implemented nn.Linear and nn.Module and will be able to write the train loop next lesson ! .",
            "url": "https://cedric-perauer.github.io/DL_from_Foundations/markdown/2020/04/01/DL-From-Foundations-Part1.html",
            "relUrl": "/markdown/2020/04/01/DL-From-Foundations-Part1.html",
            "date": " • Apr 1, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://cedric-perauer.github.io/DL_from_Foundations/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://cedric-perauer.github.io/DL_from_Foundations/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://cedric-perauer.github.io/DL_from_Foundations/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}